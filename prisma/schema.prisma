datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int
  images      String
  variants    Variant[]
  categoryId  String
  category    Category   @relation(fields: [categoryId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  orderItems  OrderItem[]
  cartItems   CartItem[]
}

model Variant {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  name      String
  value     String
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Address {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String   // 'billing', 'shipping'
  address   String
  city      String
  state     String
  country   String
  zipCode   String
  createdAt DateTime  @default(now())
}

model Order {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  items       OrderItem[]
  totalAmount Float
  status      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  payment     Payment?
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

model Payment {
  id          String    @id @default(uuid())
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     String    @unique
  amount      Float
  status      String    @default("pending")
  method      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model User {
  id            String      @id @default(uuid())
  name          String
  email         String      @unique
  password      String
  role          String      @default("user")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  addresses     Address[]
  orders        Order[]
  activityLogs  ActivityLog[]
  cart          Cart?       // Add this field for the one-to-one relation
}

model Cart {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActivityLog {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  action    String
  createdAt DateTime @default(now())
}

model Report {
  id         String   @id @default(uuid())
  type       String
  generatedAt DateTime @default(now())
}