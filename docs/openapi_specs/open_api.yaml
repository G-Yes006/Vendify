openapi: 3.0.0
info:
  title: E-Commerce API
  version: 1.0.0
  description: API for an enterprise-level e-commerce and inventory system
  contact:
    name: API Support
    email: support@ecommerce.com

servers:
  - url: http://localhost:3000
    description: Development server

tags:
  - name: Auth
    description: Authentication and Authorization
  - name: Products
    description: Product Management
  - name: Cart
    description: Shopping Cart
  - name: Orders
    description: Order Management
  - name: Payments
    description: Payment Processing
  - name: Reports
    description: Sales and Inventory Reports

paths:
  /auth/signup:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
              required:
                - email
                - password
                - name
      responses:
        '201':
          description: User created successfully
        '400':
          description: Bad request

  /auth/login:
    post:
      tags: [Auth]
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Unauthorized

  /products:
    get:
      tags: [Products]
      summary: Get all products
      parameters:
        - name: page
          in: query
          description: Pagination page number
          schema:
            type: integer
        - name: limit
          in: query
          description: Number of products per page
          schema:
            type: integer
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

    post:
      tags: [Products]
      summary: Create a new product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created
        '401':
          description: Unauthorized

  /products/{productId}:
    get:
      tags: [Products]
      summary: Get product details
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

  /cart:
    get:
      tags: [Cart]
      summary: Get current user's cart
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User's cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

    post:
      tags: [Cart]
      summary: Add item to cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                quantity:
                  type: integer
              required:
                - productId
                - quantity
      responses:
        '200':
          description: Item added to cart
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /orders:
    post:
      tags: [Orders]
      summary: Create a new order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentMethod:
                  type: string
                  description: Payment method (e.g., stripe, paypal)
                addressId:
                  type: string
      responses:
        '201':
          description: Order created
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /orders/{orderId}:
    get:
      tags: [Orders]
      summary: Get order details
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

  /payments:
    post:
      tags: [Payments]
      summary: Process a payment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                currency:
                  type: string
                source:
                  type: string
                  description: Payment source (Stripe token, etc.)
      responses:
        '200':
          description: Payment successful
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '402':
          description: Payment required

  /reports/sales:
    get:
      tags: [Reports]
      summary: Get sales report
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          description: Start date for report (YYYY-MM-DD)
          schema:
            type: string
        - name: endDate
          in: query
          description: End date for report (YYYY-MM-DD)
          schema:
            type: string
      responses:
        '200':
          description: Sales report data
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalSales:
                    type: number
                  totalOrders:
                    type: number
        '401':
          description: Unauthorized

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
        stock:
          type: integer
        categories:
          type: array
          items:
            type: string

    Cart:
      type: object
      properties:
        id:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
              quantity:
                type: integer

    Order:
      type: object
      properties:
        id:
          type: string
        totalAmount:
          type: number
        status:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
              quantity:
                type: integer

securitySchemes:
  bearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT
